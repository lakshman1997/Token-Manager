// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package TokenService

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TokenCRUDClient is the client API for TokenCRUD service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TokenCRUDClient interface {
	Create(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Status, error)
	Delete(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Status, error)
	Write(ctx context.Context, in *Domain, opts ...grpc.CallOption) (*ResponseForWrite, error)
	Read(ctx context.Context, in *ID, opts ...grpc.CallOption) (*ResponseForRead, error)
	ReplicationForWrite(ctx context.Context, in *ReplicationDomain, opts ...grpc.CallOption) (*ReplicationResponseForWrite, error)
	ReplicationForRead(ctx context.Context, in *ReplicationID, opts ...grpc.CallOption) (*ReplicationResponseForRead, error)
}

type tokenCRUDClient struct {
	cc grpc.ClientConnInterface
}

func NewTokenCRUDClient(cc grpc.ClientConnInterface) TokenCRUDClient {
	return &tokenCRUDClient{cc}
}

func (c *tokenCRUDClient) Create(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/TokenService.TokenCRUD/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenCRUDClient) Delete(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/TokenService.TokenCRUD/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenCRUDClient) Write(ctx context.Context, in *Domain, opts ...grpc.CallOption) (*ResponseForWrite, error) {
	out := new(ResponseForWrite)
	err := c.cc.Invoke(ctx, "/TokenService.TokenCRUD/Write", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenCRUDClient) Read(ctx context.Context, in *ID, opts ...grpc.CallOption) (*ResponseForRead, error) {
	out := new(ResponseForRead)
	err := c.cc.Invoke(ctx, "/TokenService.TokenCRUD/Read", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenCRUDClient) ReplicationForWrite(ctx context.Context, in *ReplicationDomain, opts ...grpc.CallOption) (*ReplicationResponseForWrite, error) {
	out := new(ReplicationResponseForWrite)
	err := c.cc.Invoke(ctx, "/TokenService.TokenCRUD/ReplicationForWrite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenCRUDClient) ReplicationForRead(ctx context.Context, in *ReplicationID, opts ...grpc.CallOption) (*ReplicationResponseForRead, error) {
	out := new(ReplicationResponseForRead)
	err := c.cc.Invoke(ctx, "/TokenService.TokenCRUD/ReplicationForRead", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TokenCRUDServer is the server API for TokenCRUD service.
// All implementations must embed UnimplementedTokenCRUDServer
// for forward compatibility
type TokenCRUDServer interface {
	Create(context.Context, *ID) (*Status, error)
	Delete(context.Context, *ID) (*Status, error)
	Write(context.Context, *Domain) (*ResponseForWrite, error)
	Read(context.Context, *ID) (*ResponseForRead, error)
	ReplicationForWrite(context.Context, *ReplicationDomain) (*ReplicationResponseForWrite, error)
	ReplicationForRead(context.Context, *ReplicationID) (*ReplicationResponseForRead, error)
	mustEmbedUnimplementedTokenCRUDServer()
}

// UnimplementedTokenCRUDServer must be embedded to have forward compatible implementations.
type UnimplementedTokenCRUDServer struct {
}

func (UnimplementedTokenCRUDServer) Create(context.Context, *ID) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedTokenCRUDServer) Delete(context.Context, *ID) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedTokenCRUDServer) Write(context.Context, *Domain) (*ResponseForWrite, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Write not implemented")
}
func (UnimplementedTokenCRUDServer) Read(context.Context, *ID) (*ResponseForRead, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (UnimplementedTokenCRUDServer) ReplicationForWrite(context.Context, *ReplicationDomain) (*ReplicationResponseForWrite, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplicationForWrite not implemented")
}
func (UnimplementedTokenCRUDServer) ReplicationForRead(context.Context, *ReplicationID) (*ReplicationResponseForRead, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplicationForRead not implemented")
}
func (UnimplementedTokenCRUDServer) mustEmbedUnimplementedTokenCRUDServer() {}

// UnsafeTokenCRUDServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TokenCRUDServer will
// result in compilation errors.
type UnsafeTokenCRUDServer interface {
	mustEmbedUnimplementedTokenCRUDServer()
}

func RegisterTokenCRUDServer(s grpc.ServiceRegistrar, srv TokenCRUDServer) {
	s.RegisterService(&TokenCRUD_ServiceDesc, srv)
}

func _TokenCRUD_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenCRUDServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TokenService.TokenCRUD/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenCRUDServer).Create(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokenCRUD_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenCRUDServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TokenService.TokenCRUD/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenCRUDServer).Delete(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokenCRUD_Write_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Domain)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenCRUDServer).Write(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TokenService.TokenCRUD/Write",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenCRUDServer).Write(ctx, req.(*Domain))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokenCRUD_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenCRUDServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TokenService.TokenCRUD/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenCRUDServer).Read(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokenCRUD_ReplicationForWrite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplicationDomain)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenCRUDServer).ReplicationForWrite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TokenService.TokenCRUD/ReplicationForWrite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenCRUDServer).ReplicationForWrite(ctx, req.(*ReplicationDomain))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokenCRUD_ReplicationForRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplicationID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenCRUDServer).ReplicationForRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TokenService.TokenCRUD/ReplicationForRead",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenCRUDServer).ReplicationForRead(ctx, req.(*ReplicationID))
	}
	return interceptor(ctx, in, info, handler)
}

// TokenCRUD_ServiceDesc is the grpc.ServiceDesc for TokenCRUD service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TokenCRUD_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TokenService.TokenCRUD",
	HandlerType: (*TokenCRUDServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _TokenCRUD_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _TokenCRUD_Delete_Handler,
		},
		{
			MethodName: "Write",
			Handler:    _TokenCRUD_Write_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _TokenCRUD_Read_Handler,
		},
		{
			MethodName: "ReplicationForWrite",
			Handler:    _TokenCRUD_ReplicationForWrite_Handler,
		},
		{
			MethodName: "ReplicationForRead",
			Handler:    _TokenCRUD_ReplicationForRead_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "TokenService/TokenService.proto",
}
